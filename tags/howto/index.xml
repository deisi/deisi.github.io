<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HowTo on Deisi Blog</title>
    <link>https://deisi.github.io/tags/howto/</link>
    <description>Recent content in HowTo on Deisi Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de</language>
    <copyright>&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by/4.0/&#34;&gt;&lt;img alt=&#34;Creative Commons License&#34; style=&#34;border-width:0&#34; src=&#34;https://i.creativecommons.org/l/by/4.0/88x31.png&#34; /&gt;&lt;/a&gt;&lt;br /&gt;This work is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by/4.0/&#34;&gt;Creative Commons Attribution 4.0 International License&lt;/a&gt;.</copyright>
    <lastBuildDate>Mon, 08 Mar 2021 08:00:00 +0100</lastBuildDate><atom:link href="https://deisi.github.io/tags/howto/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Testkernel kompilieren</title>
      <link>https://deisi.github.io/posts/kernel/</link>
      <pubDate>Mon, 08 Mar 2021 08:00:00 +0100</pubDate>
      
      <guid>https://deisi.github.io/posts/kernel/</guid>
      <description>Ich habe vor einiger Zeit angefangen gelegentlich meinen eigenen Linuxkernel zu kompilieren. So kann ich der Kernelentwicklung folgen und nach Regressionen ausschau halten. Den Kernel selbst zu kompilieren und zu testen ist quasi die einfachste Art und Weise einen bescheidenen Beitrag zur Linuxkernelentwicklung zu leisten. Vorausgesetzt man berichtet wenn man plötzlich Probleme haben sollte.
Ich habe extra ein Subordner für den Kernel erstellt. Warum wird am Ende klar:
mkdir kernel cd kernel Danach kann man Linus Kernelbranch herunterladen mit:</description>
    </item>
    
    <item>
      <title>Papierloses Büro</title>
      <link>https://deisi.github.io/posts/papierloses_buero/</link>
      <pubDate>Mon, 13 Apr 2020 08:00:00 +0100</pubDate>
      
      <guid>https://deisi.github.io/posts/papierloses_buero/</guid>
      <description>Papier ist soooo 20. Jahrhundert! Darum will ich so wenig wie möglich auf Papier haben. Ich scanne lieber alles hirnlos ein und speichere es auf meinen Festplatten. Damit ich das ganze später auch halbwegs sinnvoll benutzen kann, müssen die Dokumente aber durchsuchbar sein. Ansonsten hätte man, gegenüber dem einheften, nichts gewonnen. Mittel Optical Character Recognition (OCR) ist das möglich. Hier werden gedruckte Buchstaben erkannt und aus dem Scan wird ein durchsuchbarer Scan.</description>
    </item>
    
    <item>
      <title>LUKS mit Yubikey</title>
      <link>https://deisi.github.io/posts/luks_mi_yubikey/</link>
      <pubDate>Tue, 10 Mar 2020 08:00:00 +0100</pubDate>
      
      <guid>https://deisi.github.io/posts/luks_mi_yubikey/</guid>
      <description>Ich habe jetzt vor einiger Zeit zwei Ubuntu und einen Archlinux PC auf eine 2-Faktor-Vollverschlüsselung umgestellt. Mit dem Ergebnis bin ich bisher sehr zufrieden. Darum dokumentiere ich hier die nötigen Schritte. Getestet wurde diese Anleitung für Ubuntu 19.10 und 20.04
Begriffe Die folgenden Begriffe sollten so ungefähr bekannt sein.
 LUKS: Ein System zur Verschlüsselung von Festplatten unter Linux. LUKS-Header: Die wichtigste Datei einer verschlüsselten Festplatte. Hier werden die gültigen Passwörter zur Entschlüsselung in Keyslots abgelegt.</description>
    </item>
    
    <item>
      <title>DSGVO mit Disqus und GoogleAnalytics</title>
      <link>https://deisi.github.io/posts/privacy/</link>
      <pubDate>Wed, 19 Feb 2020 08:00:00 +0100</pubDate>
      
      <guid>https://deisi.github.io/posts/privacy/</guid>
      <description>Ich habe schon gerne etwas Statistik über den Blog. Man kann jetzt drüber streiten ob man unbedingt GoogleAnalytics (GA) braucht, aber wenigstens die Zugriffszahlen interessieren mich dann schon. Auch finde ich, dass eine Kommentarfunktion dazu gehört. Da ich den Blog nicht selbst hoste, sondern auf github. Kann ich aber nicht einfach das über den Apache log o.ä. machen. Darum werde ich erst mal sowohl GA, als auch Disqus einbinden bis ich was besseres finde.</description>
    </item>
    
    <item>
      <title>In House Certificate Authority with Eeasy RSA</title>
      <link>https://deisi.github.io/posts/easy_rsa/</link>
      <pubDate>Tue, 04 Feb 2020 12:47:36 +0100</pubDate>
      
      <guid>https://deisi.github.io/posts/easy_rsa/</guid>
      <description>Over the years I grew a fairly sophisticated network at home. Currently I have a x86 server and a raspberry pi running 24/7. On the x86 Server there are many services like homeassistant, tvheadend, kodi, mopidy, snapcast and a couple more. The raspberry pi is used in my bathroom to play music and measure humidity and temperature. Anyway, most of the services in a local network run without encryption. Take mopidy e.</description>
    </item>
    
    <item>
      <title>Zwei Faktor Authentifizierung (2FA) mit SSH</title>
      <link>https://deisi.github.io/posts/2fa/</link>
      <pubDate>Tue, 08 Jan 2019 18:47:05 +0100</pubDate>
      
      <guid>https://deisi.github.io/posts/2fa/</guid>
      <description>Es zeigt sich, das zwei Faktor Authentifizierung (2FA) mit SSH sowohl gut, als auch schlecht funktioniert. Die Installation und die initiale Inbetriebnahme ist verboten einfach, allerdings steckt der Teufel im Detail.
1. Google PAM Modul Installieren PAM steht für Pluggable Authentication Module und bezeichnet den Namen unter dem google seinen Service für 2FA führt. Ein anderer Begriff denn man öfter mal ließt ist Time-based One-Time Password (TOTP). Dies bezeichnet das sich zeitlich ändernde Passwort, das mittels Google Authenticator zur Verfügung gestellt wird.</description>
    </item>
    
  </channel>
</rss>
